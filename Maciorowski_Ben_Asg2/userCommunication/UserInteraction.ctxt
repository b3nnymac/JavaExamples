#BlueJ class context
comment0.params=
comment0.target=UserInteraction\ getInstance()
comment0.text=\r\n\ Basic\ singleton\ design\ pattern\ \r\n\ @return\r\n
comment1.params=
comment1.target=void\ toggleDebug()
comment1.text=\r\n\ used\ to\ toggle\ the\ state\ of\ debug\ messages\ printing\r\n
comment10.params=format\ args
comment10.target=void\ printFormat(java.lang.String,\ java.lang.Object[])
comment10.text=\r\n\ Writes\ a\ formatted\ string\ to\ this\ output\ stream\ using\ the\ specified\ format\ string\ and\ arguments.\ \r\n\ The\ locale\ always\ used\ is\ the\ one\ returned\ by\ Locale.getDefault(),\ regardless\ of\ any\ previous\ \r\n\ invocations\ of\ other\ formatting\ methods\ on\ this\ object.\r\n\ @param\ format\ A\ format\ string\ as\ described\ in\ Format\ string\ syntax\r\n\ @param\ args\ Arguments\ referenced\ by\ the\ format\ specifiers\ in\ the\ format\ string.\ If\ there\ are\ more\ arguments\ than\ format\ specifiers,\ the\ extra\ arguments\ are\ ignored.\ The\ number\ of\ arguments\ is\ variable\ and\ may\ be\ zero.\ The\ maximum\ number\ of\ arguments\ is\ limited\ by\ the\ maximum\ dimension\ of\ a\ Java\ array\ as\ defined\ by\ The\ Java\u2122\ Virtual\ Machine\ Specification.\ The\ behaviour\ on\ a\ null\ argument\ depends\ on\ the\ conversion.\r\n
comment11.params=format\ args
comment11.target=void\ printlnFormat(java.lang.String,\ java.lang.Object[])
comment11.text=\r\n\ Writes\ a\ formatted\ string\ to\ this\ output\ stream\ using\ the\ specified\ format\ string\ and\ arguments.\ \r\n\ The\ locale\ always\ used\ is\ the\ one\ returned\ by\ Locale.getDefault(),\ regardless\ of\ any\ previous\ \r\n\ invocations\ of\ other\ formatting\ methods\ on\ this\ object.\r\n\ @param\ format\ A\ format\ string\ as\ described\ in\ Format\ string\ syntax\r\n\ @param\ args\ Arguments\ referenced\ by\ the\ format\ specifiers\ in\ the\ format\ string.\ If\ there\ are\ more\ arguments\ than\ format\ specifiers,\ the\ extra\ arguments\ are\ ignored.\ The\ number\ of\ arguments\ is\ variable\ and\ may\ be\ zero.\ The\ maximum\ number\ of\ arguments\ is\ limited\ by\ the\ maximum\ dimension\ of\ a\ Java\ array\ as\ defined\ by\ The\ Java\u2122\ Virtual\ Machine\ Specification.\ The\ behaviour\ on\ a\ null\ argument\ depends\ on\ the\ conversion.\r\n
comment12.params=message
comment12.target=int\ getInput_Int(java.lang.String)
comment12.text=\r\n\ Displays\ a\ message\ and\ waits\ to\ read\ an\ integer\ from\ the\ user\r\n\ @param\ message\ the\ message\ to\ display\r\n\ @return\ the\ integer\ inputed\ by\ the\ user\r\n
comment13.params=message\ smallestValue
comment13.target=int\ getInput_IntGreaterThan(java.lang.String,\ int)
comment13.text=\r\n\ Displays\ a\ message\ and\ waits\ to\ read\ an\ integer\ from\ the\ user.\ Verifies\r\n\ that\ the\ entered\ number\ is\ greater\ than\ or\ equal\ to\ smallestValue\r\n\ @param\ message\ the\ message\ to\ display\r\n\ @param\ smallestValue\ the\ smallest\ possible\ legal\ value\ the\ user\ can\ enter\r\n\ @return\ the\ integer\ inputed\ by\ the\ user\r\n
comment14.params=message\ smallestValue\ largestValue
comment14.target=int\ getInput_IntBetween(java.lang.String,\ int,\ int)
comment14.text=\r\n\ Displays\ a\ message\ and\ waits\ to\ read\ an\ integer\ from\ the\ user.\ Verifies\r\n\ that\ the\ entered\ number\ is\ between\ the\ provided\ values\ (inclusive)\r\n\ @param\ message\ the\ message\ to\ display\r\n\ @param\ smallestValue\ the\ smallest\ possible\ legal\ value\ the\ user\ can\ enter\r\n\ @param\ largestValue\ the\ largest\ possible\ legal\ value\ the\ user\ can\ enter\r\n\ @return\ the\ integer\ inputed\ by\ the\ user\r\n
comment15.params=message
comment15.target=double\ getInput_Double(java.lang.String)
comment15.text=\r\n\ gets\ a\ double\ from\ the\ input\ without\ displaying\ a\ message\r\n\ @param\ message\ the\ message\ to\ display\r\n\ @return\ the\ entered\ double\r\n
comment16.params=message\ smallestValue
comment16.target=double\ getInput_DoubleGreaterThan(java.lang.String,\ double)
comment16.text=\r\n\ Displays\ a\ message\ and\ waits\ to\ read\ an\ double\ from\ the\ user.\ Verifies\r\n\ that\ the\ entered\ number\ is\ greater\ than\ or\ equal\ to\ smallestValue\r\n\ @param\ message\ the\ message\ to\ display\r\n\ @param\ smallestValue\ the\ smallest\ possible\ legal\ value\ the\ user\ can\ enter\r\n\ @return\ the\ double\ inputed\ by\ the\ user\r\n
comment17.params=message\ smallestValue\ largestValue
comment17.target=double\ getInput_DoubleBetween(java.lang.String,\ double,\ double)
comment17.text=\r\n\ Displays\ a\ message\ and\ waits\ to\ read\ an\ double\ from\ the\ user.\ Verifies\r\n\ that\ the\ entered\ number\ is\ between\ the\ provided\ values\ (inclusive)\r\n\ @param\ message\ the\ message\ to\ display\r\n\ @param\ smallestValue\ the\ smallest\ possible\ legal\ value\ the\ user\ can\ enter\r\n\ @param\ largestValue\ the\ largest\ possible\ legal\ value\ the\ user\ can\ enter\r\n\ @return\ the\ double\ inputed\ by\ the\ user\r\n
comment18.params=
comment18.target=void\ clearInputLine()
comment18.text=\r\n\ clears\ one\ line\ from\ the\ input\ console\r\n
comment19.params=
comment19.target=int\ getInput_Int()
comment19.text=\r\n\ gets\ an\ integer\ from\ the\ input\ without\ displaying\ a\ message\r\n\ @return\ the\ entered\ integer\r\n
comment2.params=value
comment2.target=void\ setDebug(boolean)
comment20.params=message
comment20.target=java.lang.String\ getInput_String(java.lang.String)
comment20.text=\r\n\ Displays\ a\ message\ and\ waits\ to\ read\ a\ line\ of\ text\ from\ the\ user\r\n\ @param\ message\ the\ message\ to\ display\r\n\ @return\ the\ line\ inputed\ by\ the\ user\r\n
comment21.params=message
comment21.target=char\ getInput_char(java.lang.String)
comment21.text=\r\n\ reads\ one\ character\ from\ the\ input\r\n\ @param\ message\ the\ message\ to\ display\r\n\ @return\ the\ entered\ character\ or\ NO_CHAR_INPUT\ if\ no\ input\r\n
comment22.params=message\ validChars
comment22.target=char\ getInput_char(java.lang.String,\ java.lang.String)
comment22.text=\r\n\ reads\ one\ character\ from\ the\ input\ and\ validates\ that\ a\ valid\ character\ has\ been\ entered\r\n\ @param\ message\ the\ message\ to\ display\r\n\ @param\ validChars\ a\ string\ that\ contains\ all\ valid\ characters\ that\ can\ be\ entered\r\n\ @return\ the\ entered\ character\ or\ NO_CHAR_INPUT\ if\ no\ input\r\n
comment23.params=message
comment23.target=boolean\ yesNo(java.lang.String)
comment23.text=\r\n\ Presents\ the\ user\ with\ a\ yes/no\ question\ used\ for\ verification.\ Adds\ the\ (y,n)\ to\ the\ provided\ message\r\n\ @param\ message\ the\ message\ to\ display\r\n\ @return\ true\ if\ the\ user\ answered\ yes,\ false\ otherwise\r\n
comment24.params=
comment24.target=void\ pause()
comment24.text=\r\n\ pauses\ the\ program\ until\ the\ user\ hits\ enter\ \r\n
comment25.params=
comment25.target=void\ clearBlueJTerminal()
comment25.text=\r\n\ Can\ be\ used\ to\ clear\ the\ bluej\ terminal\ of\ all\ text\r\n
comment3.params=
comment3.target=UserInteraction()
comment3.text=\r\n\ default\ constructor\r\n
comment4.params=message
comment4.target=void\ print(java.lang.String)
comment4.text=\r\n\ method\ to\ contain\ printing\ of\ messages\ to\ the\ console\r\n\ @param\ message\ the\ message\ to\ print\r\n
comment5.params=obj
comment5.target=void\ print(java.lang.Object)
comment5.text=\r\n\ method\ to\ contain\ printing\ of\ objects\ to\ the\ console\ (calls\ toString())\r\n\ @param\ obj\ the\ object\ to\ print\r\n
comment6.params=message
comment6.target=void\ println(java.lang.String)
comment6.text=\r\n\ method\ to\ contain\ printing\ of\ messages\ to\ the\ console\ with\ a\ new\ line\r\n\ @param\ message\ the\ message\ to\ print\r\n
comment7.params=obj
comment7.target=void\ println(java.lang.Object)
comment7.text=\r\n\ method\ to\ contain\ printing\ of\ objects\ to\ the\ console\ (calls\ toString())\r\n\ @param\ obj\ the\ object\ to\ print\r\n
comment8.params=message
comment8.target=void\ println_debug(java.lang.String)
comment8.text=\r\n\ method\ to\ contain\ printing\ of\ messages\ to\ the\ console\ with\ a\ new\ line\ in\ debug\ mode\r\n\ @param\ message\ the\ message\ to\ print\r\n
comment9.params=message
comment9.target=void\ println_error(java.lang.String)
comment9.text=\r\n\ method\ to\ contain\ printing\ of\ messages\ to\ the\ console\ specific\ to\ errors.\ \r\n\ @param\ message\ the\ message\ to\ print\r\n
numComments=26
